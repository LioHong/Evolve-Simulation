main:
{
      1  call  7  NEAREST  2dup  EAT  pop  OMOVE  pop  1  ?loop 
}

row1:
{
      ENERGY  4  /  R0!  15  FARTHEST  2dup  R0  MAKE-SPORE  pop
      R0  MAKE-SPORE  pop  2  NEAREST  2negate  2dup  OMOVE  pop
      OMOVE  pop 
}

main:
{
      1  call 
	  ;
	  ; Jump to row1
	  ;
	  
	  7  NEAREST  2dup  EAT  pop 
	  ;
	  ; Bit mask: 0111 - Everything except barriers
	  ; Find the nearest edible object and eat it
	  ;
	  
	  OMOVE  pop  
	  ;
	  ; Try to move towards the food
	  ;
	  
	  1  ?loop 
	  ;
	  ; Loop if true
	  ; 
}

row1:
{
      ENERGY  4  /  R0!  
	  ;
	  ; Divide then store in R0
	  ;
	  
	  
	  15  FARTHEST  2dup  
	  ;
	  ; 15bin = 1111 - Search for all obstructions: cells, spores, organic matter, barriers
	  ; Then find which one is the farthest and return the direction vector
	  ; Duplicate the vector
	  ; PURPOSE: Produce a spore in the emptiest area of the map accessible to organism
	  ;
	  
	  (FARTHEST  2dup) R0  MAKE-SPORE  pop
	  ;
	  ; Take the direction vector and select the appropriate square
	  ; Use a quarter of energy to make spore for the first time, then remove item from stack
	  ;
	  
	  
      R0  MAKE-SPORE  pop
	  ;
	  ; Repeat above step to fertilise own spore, passing another quarter of energy
	  ;

	  2  NEAREST  2negate  2dup  OMOVE  pop
	  ;
	  ; Bit mask: 0010 - Spores
	  ; Find the nearest spore, then negate (multiply by -1) the direction vector
	  ; Duplicate the vector away from the spore and organism-move
	  ;
	  
      OMOVE  pop 
	  ;
	  ; No numbers but try and move?
	  ;
	  
}

Only MAKE-SPORE and GROW require energy.
Radioactive marker is a dominant trait, but unrelated to the KFORTH genome. -> Different colours of markers? Tweakable colours? Merging?

Is there any sort of API for Evolve? I want it to export the data for all organisms at a certain time step. Then from the first step, export first, then check for changes, and finally save only the changes.
Can store the population data and genomes for each time step? Any way to compress?
What is the advantage of multicellularity? More energy to grow and reproduce?
Guide: Grow also allows a creature to increase its processing power. An organism consisting of two cells has twice the processing power of a single celled creature. Such an organism can do twice the computations in the same amount of steps as a single celled creature. This is profound capability and any creature that makes the leap into multi-cellularism has a lot going for it. 

Family tree: Recursive
But can also test the phylogenetic approach and see how they gel together.

S11: Org1 make spore Spo1.1 to N
S14: Org1 self-fertilise spore - Org2
S20: Org1 try and move but vector is (0,0) so stay still
S25: Org2 make spore
S28: Org1 eats Org2 (Bigbang attempts to reproduce before moving, so cannibalism of child occurs.)
S30: Org1 moves up toward spore.
S44: Org1 makes spore Spo1.2 to S (opposite Org2's spore)
S47: Org1 self-fertilise spore - Org3
S58: Org3 make spore Spo3.1
S61: Org1 eats Org2's spore Spo2.1, Org3 self-fertilise spore - Org4
Constant cannibalism of children. But slowly the cells move away from each other and population rises.
S63: Org1 moves N
...
S92: Org3 makes spore 3.2 to W as Org1 lies N while Spo4.1 lies S. 
Diverges from loop that Org1 is undergoing.
S101: Org3 moves N, away from Org6
S104: Org3 moves N again.
S110: Org1 makes Spo1.4 to W.
Second divergence from loop.
S255: Org1 finally gets eaten by either Org41 or Org52
S1553: Multicellular organism Org9812 appears with 78 cells. Will grow and eat and move, but not reproduce.
Universe ppty: 1252 cells, but 1175 organisms. Difference of 77 tallies with Org9812. It really is the first of its kind, but I'm sure more will slowly appear.
S1945: Org9812 died. No other multicellular organisms present.
S2815: Universe ppty: 2118 cells, but 2117 organisms. Second multicellular organism detected, but hard to find it.
Used NUM-CELLS 2 >= in Find Dialog to locate Org52327, which can reproduce but hasn't yet.
S2863: Org52327 made 2 spores.
S2869: Both spores hatched: Org54125 and Org54124.
Sampling other organisms, many have highly-lengthened genomes. Some reach up to 5 blocks, while others have empty blocks. A few still only have 2 blocks.
S3131: Multicellular lineage of Org52327 died out due to predation.
S3810: 3rd multicellular is Org88983.
S3992: 4th multicellular is Org101146, arose separately.
~S4127: 5th multicellular is Org103488, arose separately.
S4320: Org103488 ate Org101146 as both migrated to SE (1,1). Other organisms also migrating SE.
S4352: Org103488 died and left behind 4 spores.
S7002: Flock of multicellulars arise.
S40K: Multicellulars have overtaken the entire map.

Use MAFFT --text mode from cmd to compare the genomes. But =<> cannot be parsed, so need to replace them wiht ~()
Can use a list of KFORTH codewords to break up the compared strings. A lot of replace('word', ' word ') and removal of double spaces ('  ') most likely.
Automate the use of MAFFT? But it takes a few seconds which is too long. The delta step might take much longer than a simple data compression to tar.gz.
Use python difflib.SequenceMatcher() and s.ratio() to assess homology percent? Or find equivalent function in MAFFT.
If KFORTH words and organism instructions are replaced with single chars each, would that aid in alignment? I don't think so, especially because numbers with more than 1 digit exist. And anyway I would be limited to 52 letters.
In other words, measure the words between spaces. Numbers, strings and other symbols.

To use SequenceMatcher(), I had to remove all the dashes from the outputted MAFFT and then compare. Not sure if it works though... Anyway, I'm looking for a UGENE-style alignment, except that the alignment would work by words rather than just letters. (Also, start from the longest words first then work down. Must exclude the longer words from being broke up as well e.g. 'grow' and 'row'.)

Setup Codelite, but had to setup MinGW, and install MSYS. A bit involved, all to avoid Visual Studio. And it doesn't even seem to work.
Visual Studio Code (vs IDE) also doesn't seem to be able to build.
Try Code::Blocks even though its last update was in 2020. Turns out I can't even add a folder to it.

F2: 632/10s
F1: 1200/10s, ~2x speed

Duplication, Insertion, Deletion, Transposition, Modification, Mutate Code Block
Clearly, there is lower chance for a deletion to occur. Perhaps that's why the genome size keeps increasing, albeit with empty blocks. But then again, the deletion rate was already raised to 8%, 4x the mode of 2%. But big_bang involves one of the smallest genomes; other KFORTH scripts have genome lengths in the 100s.
The provided genomes in the simulations folder include plenty of dev comments, and even diagrams. There is great potential here I feel, even with this simplified model.

The genes/instructions of Evolve don't have alleles, but values. Perhaps the values are the equivalent to alleles? Anyway, there are no gene products available. The only products that an organism can make are additional cells, or spores.
Another thing that Yao Yao added was regulatory genes. Genes that affect the expression of other genes. I think it might be possible to mimic that behaviour with a lot of if conditionals.
Moreover, I don't really see genes acting as evolutionary units. Perhaps because of the limited vocabulary, or the fact that each gene with the same function will have the exact same sequence of letters. Vs DNA where genes that produce identical proteins can have different sequences.

A very important question: How is fitness determined? Energy of the organism? Number of cells? Or number of offspring? These are related.
And if multicellularity confers an advantage in terms of division of labour, is there a way to reduce the lag to allow for more of this phenomenon?
Or perhaps is there a way to incorporate the lag itself into the fitness? So that the organisms will evolve to be lag-friendly? The final question might lie outside the scope of the entire simulation. But this would be more of a short-term solution, and edging into genetic algorithms for lag minimisation. A more robust solution would be to improve the efficiency of memory usage throughout.



Digging into the User Manual more, I discovered some dev-tools used by Ken.
https://rubberduck203.github.io/Evolve/evolve_batch.html
Running from the command line.
https://rubberduck203.github.io/Evolve/ascii_example.html
More important for my purposes, this exports the universe as an ASCII text file. To be precise, PHOTON ASCII or Phascii, which I suspect is another one of Ken's own invented formats.
Evolve\evolve4src\src\evolve_simulator\phascii.h
The summary of the universe.txt file is contained in this header class.
Evolve\evolve4src\src\evolve_simulator\evolve_io_ascii.cpp
Evolve\evolve4src\src\evolve_simulator\evolve_simulator_private.h
This file is involved in the text export.

Basically, if I could somehow automate the step of each universe and the text export, that would be all I needed. There'd be no need to come up with an API for now, hence no need to re-build the entire program.
https://stackoverflow.com/questions/14288177/interact-with-other-programs-using-python
Three methods to automate in descending order of ease: API, command line, or GUI.
I tested evolve_batch.exe in cmd and it's indeed possible to run simulations and save them either as .evolve, or .txt. That's really nice, though I am worried that the frequent updates will become way too big to handle. big_bang_study at 2M steps produced a 20 MB textfile. To export any .evolve file, just set the value of timestep as 0. 
To run shell commands from Python, either use `os`, `subprocess` or `command`. `subprocess` seems to be the preferred option.
https://github.com/rubberduck203/Evolve/issues/7
Me: Glad to hear that. So I went on a C++ discord and asked around, and someone mentioned that they couldn't find any makefiles or MSVC solutions in the repo. Not sure what that means, but apparently those are build tools like Gradle for Java.

Gather data from Evolve 4.8 by Ken Stauffer
=====
Recompile and build the exe myself on Atom or C++ IDE
Find out where the organism data is stored? Search the entire repo for keywords.
Find where the universe properties are stored
Add a new type of run: Data collection run
The datarun will collect the universe properties and the properties of each organism in separate dataframes
Two storage methods: Plain storage which exports data without any changes - Might be more suitable for universe properties
And delta method which measures the changes between organisms - Might be more suitable for genome storage, which would be a string far longer than any of the other data fields available.
Adapt a multiple sequence alignment (MSA) algorithm or similar to work on text strings rather than just nucleotide sequences.

cd "C:\Program Files (x86)\Evolve"
evolve_batch.exe s 1u big_bang.evolve bb_out_01.evolve
But they save to "C:\Users\Julio Hong\AppData\Local\VirtualStore\Program Files (x86)\Evolve" for some reason. For now, I've added a shortcut into the main folder in Program Files.

C:\Users\Julio Hong\Documents\LioHong\Evolve-kforth-lio\evolve4src\src\evolve_batch\evolve_batch.cpp
Includes '=' mode to compare files for debugging. However, rather than directly comparing the contents, a checksum is calculated from each universe, and then used to comapre mainly whether both universes are the same, rather than analysing how they differ.